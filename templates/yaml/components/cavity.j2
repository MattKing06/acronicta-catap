{
    "controls_information": {
        "pv_record_map": {
            "SetStartup": {
                "type": "binary",
                "description": "Startup RF",
                "read_only": false,
                "pv": "{{ set_startup_pv | default(name ~ ':API:setStartup') }}"
            },
            "StartupComplete": {
                "type": "binary",
                "description": "Check API setup status",
                "pv": "{{ startup_complete_pv | default(name ~ ':API:getStartupComplete') }}"
            },
            "APIEnable": {
                "type": "binary",
                "description": "Enable RF API",
                "read_only": false,
                "pv": "{{ api_enable_pv | default(name ~ ':API:setEnable') }}"
            },
            "GetAPITrip": {
                "type": "state",
                "description": "Get API trip status",
                "states": {{ get_api_trip_states | default({
                    "API_OFF": 0,
                    "API_ON": 1,
                    "TRIP": 2
                }) | tojson }},
                "pv": "{{ get_api_trip_pv | default(name ~ ':API:getTrip') }}"
            },
            "SetAPITrip": {
                "type": "binary",
                "read_only": false,
                "description": "Reset API trips",
                "pv": "{{ set_api_trip_pv | default(name ~ ':API:setTrip') }}"
            },
            "GetStatus": {
                "type": "state",
                "description": "Get API status",
                "states": {{ get_status_states | default({
                    "OFF": 0,
                    "STANDBY": 1,
                    "HV_ON": 2,
                    "TRIG": 3,
                    "API_ON": 4
                }) | tojson }},
                "pv": "{{ get_status_pv | default(name ~ ':API:getStatus') }}"
            },
            "PowerPIDSet": {
                "type": "binary",
                "read_only": false,
                "description": "Set power PID on",
                "pv": "{{ power_pid_set_pv | default(name ~ ':Power:PID:setOnRequest') }}"
            },
            "PowerPIDStatus": {
                "type": "state",
                "states": {{ power_pid_status_states | default({
                    "PID_OFF": 0,
                    "PID_ON": 1,
                    "PID_REMOTE": 2,
                    "TRIP": 3,
                    "INTERMEDIATE": 4
                }) | tojson }},
                "description": "Get power PID status",
                "pv": "{{ power_pid_status_pv | default(name ~ ':Power:PID:getStatus') }}"
            },
            "PowerPIDError": {
                "type": "binary",
                "description": "Check if power PID within tolerance",
                "pv": "{{ power_pid_error_pv | default(name ~ ':Power:Achieved:getBinary') }}"
            },
            "PhasePIDSet": {
                "type": "binary",
                "read_only": false,
                "description": "Set phase PID on",
                "pv": "{{ phase_pid_set_pv | default(name ~ ':Phase:PID:setOnRequest') }}"
            },
            "PhasePIDStatus": {
                "type": "state",
                "states": {{ phase_pid_status_states | default({
                    "PID_OFF": 0,
                    "PID_ON": 1,
                    "PID_REMOTE": 2,
                    "TRIP": 3,
                    "INTERMEDIATE": 4
                }) | tojson }},
                "description": "Get phase PID status",
                "pv": "{{ phase_pid_status_pv | default(name ~ ':Phase:PID:getStatus') }}"
            },
            "PhasePIDError": {
                "type": "binary",
                "description": "Check if phase PID within tolerance",
                "pv": "{{ phase_pid_error_pv | default(name ~ ':Phase:Achieved:getBinary') }}"
            },
            "PowerMWMax": {
                "type": "scalar",
                "description": "Maximum set cavity forward power",
                "units": "MW",
                "pv": "{{ power_mw_max_pv | default(name ~ ':setPower.HOPR') }}"
            },
            "PowerMWSet": {
                "type": "scalar",
                "read_only": false,
                "description": "Set cavity forward power",
                "units": "MW",
                "pv": "{{ power_mw_set_pv | default(name ~ ':setPower') }}"
            },
            "PhaseSet": {
                "type": "scalar",
                "read_only": false,
                "description": "Set cavity phase",
                "units": "deg",
                "pv": "{{ phase_set_pv | default(name ~ ':setPhase') }}"
            },
            "PowerMWRead": {
                "type": "statistical",
                "description": "Read cavity forward power",
                "units": "MW",
                "auto_buffer": true,
                "pv": "{{ power_mw_read_pv | default(name ~ ':getPower') }}"
            },
            "PhaseRead": {
                "type": "statistical",
                "description": "Read cavity phase",
                "units": "deg",
                "auto_buffer": true,
                "pv": "{{ phase_read_pv | default(name ~ ':getPhase') }}"
            },
            "CrestPhaseSet": {
                "type": "scalar",
                "description": "Set crest phase",
                "read_only": false,
                "units": "deg",
                "pv": "{{ crest_phase_set_pv | default(name ~ ':PHASE_C') }}"
            },
            "OffCrestPhaseSet": {
                "type": "scalar",
                "description": "Set cavity off-crest phase",
                "read_only": false,
                "units": "deg",
                "pv": "{{ off_crest_phase_set_pv | default(name ~ ':PHASE_OFF') }}"
            },
            "OffCrestPhaseRead": {
                "type": "statistical",
                "auto_buffer": true,
                "description": "Set cavity off-crest phase",
                "units": "deg",
                "pv": "{{ off_crest_phase_read_pv | default(name ~ ':getCrestPhase') }}"
            },
            "BeamMomentum": {
                "type": "scalar",
                read_only: false,
                "description": "Beam momentum at the exit of the cavity, used in k-value calculations for all magnets in that section.",
                "units": "MeV/c",
                "pv": "{{ beam_momentum_pv | default('CLA-' ~ machine_area ~ ':SETP') }}"
            }
        }
    },
    "properties": {
        {% set props = [] %}
        {% set _ = props.append('"hardware_type": "Cavity"') %}
        {% set _ = props.append('"machine_area": "' ~ machine_area ~ '"') %}
        {% set _ = props.append('"name": "' ~ name ~ '"') %}
        {% if virtual_name is defined %}
        {%   set _ = props.append('"virtual_name": "' ~ virtual_name ~ '"') %}
        {% else %}
        {%   set _ = props.append('"virtual_name": "VM-' ~ name ~ '"') %}
        {% endif %}
        {% set _ = props.append('"name_alias": "' ~ name_alias ~ '"') %}
        {% set _ = props.append('"type": "' ~ type ~ '"') %}
        {% set _ = props.append('"position": ' ~ position) %}
        {% if api_set_max_wait_time is defined %}
            {% set _ = props.append('"api_set_max_wait_time": ' ~ api_set_max_wait_time) %}
        {% endif %}
        {% if phase_tolerance is defined %}
            {% set _ = props.append('"phase_tolerance": ' ~ phase_tolerance) %}
        {% endif %}
        {% if power_tolerance is defined %}
            {% set _ = props.append('"power_tolerance": ' ~ power_tolerance) %}
        {% endif %}
        {{ props | join(',\n        ') }}
    }
}